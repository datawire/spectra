diff --git a/node_modules/json-schema-faker/dist/main.cjs b/node_modules/json-schema-faker/dist/main.cjs
index 2951f8c..d39d034 100644
--- a/node_modules/json-schema-faker/dist/main.cjs
+++ b/node_modules/json-schema-faker/dist/main.cjs
@@ -2278,139 +2278,155 @@ function getMeta({ $comment: comment, title, description }) {
     return memo;
   }, {});
 }
-function traverse(schema, path, resolve2, rootSchema) {
-  schema = resolve2(schema, null, path);
-  if (schema && (schema.oneOf || schema.anyOf || schema.allOf)) {
+function createTraverse(ticks) {
+  return function traverse(schema, path, resolve2, rootSchema) {
+    if (ticks > 0) {
+      ticks--;
+    }
+
+    if (ticks === 0) {
+      throw new RangeError(`Schema size exceeded`)
+    }
+
     schema = resolve2(schema, null, path);
-  }
-  if (!schema) {
-    throw new Error(`Cannot traverse at '${path.join(".")}', given '${JSON.stringify(rootSchema)}'`);
-  }
-  const context = {
-    ...getMeta(schema),
-    schemaPath: path
-  };
-  if (path[path.length - 1] !== "properties") {
-    if (option_default("useExamplesValue") && Array.isArray(schema.examples)) {
-      const fixedExamples = schema.examples.concat("default" in schema ? [schema.default] : []);
-      return { value: utils_default.typecast(null, schema, () => random_default.pick(fixedExamples)), context };
+    if (schema && (schema.oneOf || schema.anyOf || schema.allOf)) {
+      schema = resolve2(schema, null, path);
     }
-    if (option_default("useExamplesValue") && typeof schema.example !== "undefined") {
-      return { value: utils_default.typecast(null, schema, () => schema.example), context };
+    if (!schema) {
+      throw new Error(`Cannot traverse at '${path.join(".")}', given '${JSON.stringify(rootSchema)}'`);
     }
-    if (option_default("useDefaultValue") && "default" in schema) {
-      if (schema.default !== "" || !option_default("replaceEmptyByRandomValue")) {
-        return { value: schema.default, context };
+    const context = {
+      ...getMeta(schema),
+      schemaPath: path
+    };
+    if (path[path.length - 1] !== "properties") {
+      if (option_default("useExamplesValue") && Array.isArray(schema.examples)) {
+        const fixedExamples = schema.examples.concat("default" in schema ? [schema.default] : []);
+        return {value: utils_default.typecast(null, schema, () => random_default.pick(fixedExamples)), context};
+      }
+      if (option_default("useExamplesValue") && typeof schema.example !== "undefined") {
+        return {value: utils_default.typecast(null, schema, () => schema.example), context};
+      }
+      if (option_default("useDefaultValue") && "default" in schema) {
+        if (schema.default !== "" || !option_default("replaceEmptyByRandomValue")) {
+          return {value: schema.default, context};
+        }
+      }
+      if ("template" in schema) {
+        return {value: utils_default.template(schema.template, rootSchema), context};
+      }
+      if ("const" in schema) {
+        return {value: schema.const, context};
       }
     }
-    if ("template" in schema) {
-      return { value: utils_default.template(schema.template, rootSchema), context };
+    if (schema.not && typeof schema.not === "object") {
+      schema = utils_default.notValue(schema.not, utils_default.omitProps(schema, ["not"]));
+      if (schema.type && schema.type === "object") {
+        const {value, context: innerContext} = traverse(schema, path.concat(["not"]), resolve2, rootSchema);
+        return {value: utils_default.clean(value, schema, false), context: {...context, items: innerContext}};
+      }
     }
-    if ("const" in schema) {
-      return { value: schema.const, context };
+    if (typeof schema.thunk === "function") {
+      const {value, context: innerContext} = traverse(schema.thunk(rootSchema), path, resolve2);
+      return {value, context: {...context, items: innerContext}};
     }
-  }
-  if (schema.not && typeof schema.not === "object") {
-    schema = utils_default.notValue(schema.not, utils_default.omitProps(schema, ["not"]));
-    if (schema.type && schema.type === "object") {
-      const { value, context: innerContext } = traverse(schema, path.concat(["not"]), resolve2, rootSchema);
-      return { value: utils_default.clean(value, schema, false), context: { ...context, items: innerContext } };
+    if (schema.jsonPath) {
+      return {value: schema, context};
     }
-  }
-  if (typeof schema.thunk === "function") {
-    const { value, context: innerContext } = traverse(schema.thunk(rootSchema), path, resolve2);
-    return { value, context: { ...context, items: innerContext } };
-  }
-  if (schema.jsonPath) {
-    return { value: schema, context };
-  }
-  let type = schema.type;
-  if (Array.isArray(type)) {
-    type = random_default.pick(type);
-  } else if (typeof type === "undefined") {
-    type = infer_default(schema, path) || type;
-    if (type) {
-      schema.type = type;
+    let type = schema.type;
+    if (Array.isArray(type)) {
+      type = random_default.pick(type);
+    } else if (typeof type === "undefined") {
+      type = infer_default(schema, path) || type;
+      if (type) {
+        schema.type = type;
+      }
     }
-  }
-  if (typeof schema.generate === "function") {
-    const retVal = utils_default.typecast(null, schema, () => schema.generate(rootSchema, path));
-    const retType = retVal === null ? "null" : typeof retVal;
-    if (retType === type || retType === "number" && type === "integer" || Array.isArray(retVal) && type === "array") {
-      return { value: retVal, context };
+    if (typeof schema.generate === "function") {
+      const retVal = utils_default.typecast(null, schema, () => schema.generate(rootSchema, path));
+      const retType = retVal === null ? "null" : typeof retVal;
+      if (retType === type || retType === "number" && type === "integer" || Array.isArray(retVal) && type === "array") {
+        return {value: retVal, context};
+      }
     }
-  }
-  if (typeof schema.pattern === "string") {
-    return { value: utils_default.typecast("string", schema, () => random_default.randexp(schema.pattern)), context };
-  }
-  if (Array.isArray(schema.enum)) {
-    return { value: utils_default.typecast(null, schema, () => random_default.pick(schema.enum)), context };
-  }
-  if (typeof type === "string") {
-    if (!types_default[type]) {
-      if (option_default("failOnInvalidTypes")) {
-        throw new error_default(`unknown primitive ${utils_default.short(type)}`, path.concat(["type"]));
+    if (typeof schema.pattern === "string") {
+      return {value: utils_default.typecast("string", schema, () => random_default.randexp(schema.pattern)), context};
+    }
+    if (Array.isArray(schema.enum)) {
+      return {value: utils_default.typecast(null, schema, () => random_default.pick(schema.enum)), context};
+    }
+    if (typeof type === "string") {
+      if (!types_default[type]) {
+        if (option_default("failOnInvalidTypes")) {
+          throw new error_default(`unknown primitive ${utils_default.short(type)}`, path.concat(["type"]));
+        } else {
+          const value = option_default("defaultInvalidTypeProduct");
+          if (typeof value === "string" && types_default[value]) {
+            return {value: types_default[value](schema, path, resolve2, traverse), context};
+          }
+          return {value, context};
+        }
       } else {
-        const value = option_default("defaultInvalidTypeProduct");
-        if (typeof value === "string" && types_default[value]) {
-          return { value: types_default[value](schema, path, resolve2, traverse), context };
+        try {
+          const innerResult = types_default[type](schema, path, resolve2, traverse);
+          if (type === "array") {
+            return {
+              value: innerResult.map(({value}) => value),
+              context: {
+                ...context,
+                items: innerResult.map(
+                  Array.isArray(schema.items) ? ({context: c}) => c : ({context: c}) => ({
+                    ...c,
+                    // we have to remove the index from the path to get the real schema path
+                    schemaPath: c.schemaPath.slice(0, -1)
+                  })
+                )
+              }
+            };
+          }
+          if (type === "object") {
+            return innerResult !== null ? {
+              value: innerResult.value,
+              context: {...context, items: innerResult.context}
+            } : {value: {}, context};
+          }
+          return {value: innerResult, context};
+        } catch (e) {
+          if (e instanceof RangeError) {
+            throw e;
+          }
+          if (typeof e.path === "undefined") {
+            throw new error_default(e.stack, path);
+          }
+          throw e;
         }
-        return { value, context };
       }
-    } else {
-      try {
-        const innerResult = types_default[type](schema, path, resolve2, traverse);
-        if (type === "array") {
-          return {
-            value: innerResult.map(({ value }) => value),
-            context: {
-              ...context,
-              items: innerResult.map(
-                Array.isArray(schema.items) ? ({ context: c }) => c : ({ context: c }) => ({
-                  ...c,
-                  // we have to remove the index from the path to get the real schema path
-                  schemaPath: c.schemaPath.slice(0, -1)
-                })
-              )
-            }
-          };
-        }
-        if (type === "object") {
-          return innerResult !== null ? { value: innerResult.value, context: { ...context, items: innerResult.context } } : { value: {}, context };
-        }
-        return { value: innerResult, context };
-      } catch (e) {
-        if (typeof e.path === "undefined") {
-          throw new error_default(e.stack, path);
+    }
+    let valueCopy = {};
+    let contextCopy = {...context};
+    if (Array.isArray(schema)) {
+      valueCopy = [];
+    }
+    const pruneProperties = option_default("pruneProperties") || [];
+    Object.keys(schema).forEach((prop) => {
+      if (pruneProperties.includes(prop))
+        return;
+      if (schema[prop] === null)
+        return;
+      if (typeof schema[prop] === "object" && prop !== "definitions") {
+        const {value, context: innerContext} = traverse(schema[prop], path.concat([prop]), resolve2, valueCopy);
+        valueCopy[prop] = utils_default.clean(value, schema[prop], false);
+        contextCopy[prop] = innerContext;
+        if (valueCopy[prop] === null && option_default("omitNulls")) {
+          delete valueCopy[prop];
+          delete contextCopy[prop];
         }
-        throw e;
+      } else {
+        valueCopy[prop] = schema[prop];
       }
-    }
-  }
-  let valueCopy = {};
-  let contextCopy = { ...context };
-  if (Array.isArray(schema)) {
-    valueCopy = [];
+    });
+    return {value: valueCopy, context: contextCopy};
   }
-  const pruneProperties = option_default("pruneProperties") || [];
-  Object.keys(schema).forEach((prop) => {
-    if (pruneProperties.includes(prop))
-      return;
-    if (schema[prop] === null)
-      return;
-    if (typeof schema[prop] === "object" && prop !== "definitions") {
-      const { value, context: innerContext } = traverse(schema[prop], path.concat([prop]), resolve2, valueCopy);
-      valueCopy[prop] = utils_default.clean(value, schema[prop], false);
-      contextCopy[prop] = innerContext;
-      if (valueCopy[prop] === null && option_default("omitNulls")) {
-        delete valueCopy[prop];
-        delete contextCopy[prop];
-      }
-    } else {
-      valueCopy[prop] = schema[prop];
-    }
-  });
-  return { value: valueCopy, context: contextCopy };
 }
 var traverse_default;
 var init_traverse = __esm({
@@ -2421,7 +2437,7 @@ var init_traverse = __esm({
     init_infer();
     init_types();
     init_option();
-    traverse_default = traverse;
+    traverse_default = createTraverse;
   }
 });
 
@@ -2611,6 +2627,7 @@ function run(refs, schema, container2, synchronous) {
   }
   const refDepthMin = option_default("refDepthMin") || 0;
   const refDepthMax = option_default("refDepthMax") || 3;
+  const ticks = option_default("ticks") ?? -1;
   try {
     const { resolveSchema } = buildResolveSchema_default({
       refs,
@@ -2620,7 +2637,7 @@ function run(refs, schema, container2, synchronous) {
       refDepthMin,
       refDepthMax
     });
-    const result = traverse_default(utils_default.clone(schema), [], resolveSchema);
+    const result = traverse_default(ticks)(utils_default.clone(schema), [], resolveSchema);
     if (option_default("resolveJsonPath")) {
       return {
         value: resolve(result.value),
